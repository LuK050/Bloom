From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: KatanaMajesty <sasha.panasenk@gmail.com>
Date: Tue, 28 Jun 2022 13:29:50 +0300
Subject: [PATCH] Added Bloom Configuration


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 06bff37e4c1fddd3be6343049a66787c63fb420c..0a481c9807261b920a18a44c53d29ebbd95711de 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -241,7 +241,8 @@ public class TimingsExport extends Thread {
         parent.put("config", createObject(
             pair("spigot", mapAsJSON(Bukkit.spigot().getSpigotConfig(), null)),
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
-            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null))
+            pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)),
+            pair("bloom", mapAsJSON(Bukkit.spigot().getBloomConfig(), null))
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/com/katanamajesty/bloom/server/BloomConfiguration.java b/src/main/java/com/katanamajesty/bloom/server/BloomConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..1d6e2556d089f6a8457e83426580893cb07edfa8
--- /dev/null
+++ b/src/main/java/com/katanamajesty/bloom/server/BloomConfiguration.java
@@ -0,0 +1,101 @@
+package com.katanamajesty.bloom.server;
+
+import io.papermc.paper.util.JarManifests;
+import org.bukkit.Bukkit;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.List;
+import java.util.Optional;
+import java.util.jar.Manifest;
+
+public class BloomConfiguration {
+
+    //    private static final String configurationFolder = ".";
+    private static @Nullable File configurationFile = null;
+    private static final @NotNull YamlConfiguration config = new YamlConfiguration();
+    private static final @NotNull String configurationHeader = """
+            This is Bloom's main configuration file. Last commit at: %s
+            Bloom is not intended and not suitable for public use. At least not yet.
+            Be aware, that some changes may heavily affect server's stability and performance in both positive and negative meanings
+            Nevertheless, you are free to use and modify Bloom""";
+    public static int updates;
+    public static int version;
+    public static boolean verbose;
+
+    public static void init(@NotNull String configurationName) {
+        configurationFile = new File(configurationName);
+
+        if (configurationFile.exists()) {
+            try {
+                config.load(configurationFile);
+            } catch (IOException | InvalidConfigurationException e) {
+                Bukkit.getLogger().warning("Failed to load Bloom configuration file: " + e.getLocalizedMessage());
+            }
+        }
+
+        Manifest manifest = JarManifests.manifest(Bukkit.getServer().getClass());
+        assert manifest != null; // IDE is not supported
+        @Nullable String commitDate = manifest.getMainAttributes().getValue("Implementation-Vendor");
+        if (commitDate == null) {
+            commitDate = "<Unknown>";
+        }
+        config.options().setHeader(List.of(String.format(configurationHeader, commitDate).split("\n")));
+        config.options().copyDefaults(true);
+        verbose = config.getBoolean("verbose", false);
+        version = config.getInt("config-version", 1);
+        updates = config.getInt("config-updates", 0);
+        set("config-version", 1);
+        set("config-updates", 1);
+    }
+
+    public static void set(@NotNull String path, @Nullable Object value) {
+        config.set(path, value);
+    }
+
+    public static void log(@Nullable String message) {
+        if (message != null && verbose) {
+            Bukkit.getLogger().severe(message);
+        }
+    }
+
+    public static @NotNull Optional<Object> getOptional(@NotNull String path) {
+        return Optional.ofNullable(config.get(path));
+    }
+
+    public static @Nullable Object get(@NotNull String path) {
+        return config.get(path);
+    }
+
+    public static int getInt(@NotNull String path) {
+        return config.getInt(path);
+    }
+
+    public static boolean getBoolean(@NotNull String path) {
+        return config.getBoolean(path);
+    }
+
+    public static long getLong(@NotNull String path) {
+        return config.getLong(path);
+    }
+
+    public static double getDouble(@NotNull String path) {
+        return config.getDouble(path);
+    }
+
+    public static @Nullable File getConfigurationFile() {
+        return configurationFile;
+    }
+
+    public static @NotNull YamlConfiguration getConfig() {
+        return config;
+    }
+
+    public static int getUpdates() {
+        return updates;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index aea18838a17fc52e1bf8cd84cd185565e6e2246d..a898b20a6162d46d6836d7a9c7740cb434f954ae 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -215,6 +215,9 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         }
         this.getPlayerList().loadAndSaveFiles(); // Must be after convertNames
         // Paper end
+        // Bloom start
+        com.katanamajesty.bloom.server.BloomConfiguration.init((String) options.valueOf("bloom-settings"));
+        // Bloom end
         // Paper start
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // Paper - load mappings for stacktrace deobf and etc.
         paperConfigurations.initializeGlobalConfiguration();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 89ac6f9556d4db8f21ab2619d86ca4c8f2163c1a..55232a88c0f682e241ace8c8f7ab1be452573283 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -235,6 +235,7 @@ import org.bukkit.scheduler.BukkitWorker;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -2716,6 +2717,13 @@ public final class CraftServer implements Server {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
 
+        // Bloom start
+        @NotNull
+        @Override
+        public YamlConfiguration getBloomConfig() {
+            return com.katanamajesty.bloom.server.BloomConfiguration.getConfig();
+        } // Bloom end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 1b9e91b20dd9a9375a0a2a6a4d7a0bcdce9e7b1a..87839415a5fb9cc3b8cd08336564025b4df62d79 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -10,6 +10,8 @@ import java.util.List;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import com.katanamajesty.bloom.server.BloomConfiguration;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import net.minecraft.util.ExceptionCollector;
@@ -158,6 +160,21 @@ public class Main {
                         .describedAs("Jar file");
                 // Paper end
 
+                // Bloom start
+//                if (!BloomConfiguration.getConfigurationFolder().isBlank()) {
+//                    acceptsAll(asList("bloom-directory", "bloom-settings-directory"), "Bloom configuration directory")
+//                            .withRequiredArg()
+//                            .ofType(File.class)
+//                            .defaultsTo(new File(BloomConfiguration.getConfigurationFolder()))
+//                            .describedAs("Config directory");
+//                }
+                acceptsAll(asList("bloom", "bloom-settings"), "Bloom configuration file")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("bloom.yml"))
+                        .describedAs("Yml file");
+                // Bloom end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
